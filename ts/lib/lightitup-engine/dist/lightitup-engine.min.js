(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("LightItUpEngine", [], factory);
	else if(typeof exports === 'object')
		exports["LightItUpEngine"] = factory();
	else
		root["LightItUpEngine"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Represents a Color
 */
var Color = /** @class */ (function () {
    /**
     * @param {number} R Red value    (0 -> 255)
     * @param {number} G Green value  (0 -> 255)
     * @param {number} B Blue value   (0 -> 255)
     */
    function Color(R, G, B) {
        this.R = 0;
        this.G = 0;
        this.B = 0;
        this.R = Color._safeLimit(R);
        this.G = Color._safeLimit(G);
        this.B = Color._safeLimit(B);
    }
    /**
     * Safely limit color part between 0 and 255, forcing it to be an integer
     * @param {number} x
     * @returns {number}
     * @private
     */
    Color._safeLimit = function (x) {
        return (isNaN(x) || null == x) ? 0 : Math.max(0, Math.min(Math.floor(x), 255));
    };
    /**
     * Clone current Color
     * @param {Color} color
     * @returns {Color}
     */
    Color.clone = function (color) {
        return new Color(color.R, color.G, color.B);
    };
    /**
     * Converts an Color to its HSL representation
     * @param   {Color}  color       The Color value
     * @return  {HSL}                The HSL representation
     */
    Color.toHSL = function (color) {
        var r = (color.R / 255), g = (color.G / 255), b = (color.B / 255);
        var max = Math.max(r, g, b), min = Math.min(r, g, b);
        var l = (max + min) / 2;
        var h = NaN;
        var s = NaN;
        if (max === min) {
            h = s = 0; // achromatic
        }
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return { H: h, S: s, L: l };
    };
    /**
     * Converts an HSL color to its RGB Color representation
     * @param   {HSL}  hsl        The HSL object
     * @return  {Color}           The RGB representation
     */
    Color.fromHSL = function (hsl) {
        var h = hsl.H, s = hsl.S, l = hsl.L;
        var r, g, b;
        if (s === 0) {
            r = g = b = l; // achromatic
        }
        else {
            var hue2rgb = function (p, q, t) {
                if (t < 0) {
                    t += 1;
                }
                if (t > 1) {
                    t -= 1;
                }
                if (t < 1 / 6) {
                    return p + (q - p) * 6 * t;
                }
                if (t < 1 / 2) {
                    return q;
                }
                if (t < 2 / 3) {
                    return p + (q - p) * (2 / 3 - t) * 6;
                }
                return p;
            };
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return new Color(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255));
    };
    /**
     * Get RBG color string eg: rgb(100, 200, 100)
     * @returns {string}
     */
    Color.prototype.toString = function () {
        return 'rgb(' + this.R + ', ' + this.G + ', ' + this.B + ')';
    };
    return Color;
}());
/* harmony default export */ __webpack_exports__["a"] = (Color);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectsUtils__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Point__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Color__ = __webpack_require__(0);



/**
 * Effect base class
 */
var EffectBase = /** @class */ (function () {
    function EffectBase() {
        this.initialized = false; // True if effect has been initialized
    }
    /**
     * Morph color A to color B by a factor equal to percent
     * @param {Color} colorA
     * @param {Color} colorB
     * @param {number} percent
     * @returns {Color}
     */
    EffectBase.smooth = function (colorA, colorB, percent) {
        var Ra = colorA.R;
        var Ga = colorA.G;
        var Ba = colorA.B;
        var Rb = colorB.R;
        var Gb = colorB.G;
        var Bb = colorB.B;
        var currentColor = new __WEBPACK_IMPORTED_MODULE_2__Color__["a" /* default */](0, 0, 0);
        currentColor.R = __WEBPACK_IMPORTED_MODULE_2__Color__["a" /* default */]._safeLimit(Ra + (Rb - Ra) * percent);
        currentColor.G = __WEBPACK_IMPORTED_MODULE_2__Color__["a" /* default */]._safeLimit(Ga + (Gb - Ga) * percent);
        currentColor.B = __WEBPACK_IMPORTED_MODULE_2__Color__["a" /* default */]._safeLimit(Ba + (Bb - Ba) * percent);
        return currentColor;
    };
    /**
     * Reset the effect
     */
    EffectBase.prototype.forceReinitialize = function () {
        this.initialized = false;
    };
    /**
     * Return the effect easing function
     * @param {string | Array<number>} easingOpt
     * @returns {Function}
     */
    EffectBase.prototype.getEasingFn = function (easingOpt) {
        var easing = easingOpt || 'linear';
        var fn = null;
        if (null != easing) {
            switch (Array.isArray(easing)) {
                case true:// Bezier points
                    var p1_1 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](easing[0], easing[1]);
                    var p2_1 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](easing[2], easing[3]);
                    fn = function (t) {
                        return __WEBPACK_IMPORTED_MODULE_0__EffectsUtils__["a" /* default */].Easing.cubicBezier(p1_1, p2_1, t);
                    };
                    break;
                case false:// Easing function name
                    fn = function (t) {
                        return __WEBPACK_IMPORTED_MODULE_0__EffectsUtils__["a" /* default */].Easing[easing](t);
                    };
                    break;
            }
        }
        return fn;
    };
    /**
     * Set the effect easing function
     * @param {string | Array<number>} easingOpt If it's an array, will be interpreted as a Bezier
     * control points array [x1, y1, x2, y2], else it must be a string referring to the an easing function name
     * as defined inside EffectUtils class
     */
    EffectBase.prototype.setEasingFn = function (easingOpt) {
        this.easingFn = this.getEasingFn(easingOpt);
    };
    /**
     * Adjust the computed state regarding to the easing function
     * @param {number} percentValue
     * @param useFn
     * @returns {number}
     */
    EffectBase.prototype.ease = function (percentValue, useFn) {
        if (useFn === void 0) { useFn = null; }
        return ((null != useFn) ? this.getEasingFn(useFn) : this.easingFn)(percentValue);
    };
    /**
     * Compute the current progress state of the effect
     * @param {number} animationStartedTime
     * @param {number} animationTime
     * @param {number} currentTime
     * @param useEaseFn
     * @returns {number}
     */
    EffectBase.prototype.percentState = function (animationStartedTime, animationTime, currentTime, useEaseFn) {
        if (useEaseFn === void 0) { useEaseFn = null; }
        return this.ease(((currentTime - animationStartedTime) % animationTime)
            / (animationTime), useEaseFn);
    };
    return EffectBase;
}());
/* harmony default export */ __webpack_exports__["a"] = (EffectBase);


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__effects_BreathEffect__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__effects_SimpleColorEffect__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__effects_StepperEffect__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__effects_RainbowEffect__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__effects_StackEffect__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__effects_TrailsEffect__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__effects_ExplodeEffect__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__effects_RandomColorEffect__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__effects_ShineEffect__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__effects_CandleEffect__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__effects_AudioEffect__ = __webpack_require__(13);











var effects = {};
effects[__WEBPACK_IMPORTED_MODULE_0__effects_BreathEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_0__effects_BreathEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_1__effects_SimpleColorEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_1__effects_SimpleColorEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_7__effects_RandomColorEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_7__effects_RandomColorEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_2__effects_StepperEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_2__effects_StepperEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_3__effects_RainbowEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_3__effects_RainbowEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_4__effects_StackEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_4__effects_StackEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_5__effects_TrailsEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_5__effects_TrailsEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_6__effects_ExplodeEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_6__effects_ExplodeEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_8__effects_ShineEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_8__effects_ShineEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_9__effects_CandleEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_9__effects_CandleEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_10__effects_AudioEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_10__effects_AudioEffect__["a" /* default */];
/**
 * Effects handler class
 */
var EffectController = /** @class */ (function () {
    function EffectController() {
    }
    /**
     * Apply an effect to the LEDs set
     * @param {Array<LED>} LEDs
     * @param {EffectConfig} effect
     * @param {number} animationStartedTime
     * @param {number} animationTime
     * @param {number} currentTime
     */
    EffectController.applyEffect = function (LEDs, effect, animationStartedTime, animationTime, currentTime) {
        if (null == effect.instance) {
            effect.instance = new effects[effect.name]();
        }
        return (effect.instance.process)(effect.options, LEDs, animationStartedTime, animationTime, currentTime);
    };
    return EffectController;
}());
/* harmony default export */ __webpack_exports__["a"] = (EffectController);


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Simulates a Breath inspiration/expiration
 */
var BreathEffect = /** @class */ (function (_super) {
    __extends(BreathEffect, _super);
    function BreathEffect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BreathEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.setEasingFn(options.easing);
            this.initialized = true;
            // Base color
            this.baseColor = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].toHSL(new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.basecolor[0], options.basecolor[1], options.basecolor[2]));
            this.currentColor = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].toHSL(new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.basecolor[0], options.basecolor[1], options.basecolor[2]));
            // How much percentage of the animation should the inspiration part take
            this.inspirationRatio = 0.01 * options.inspiration_ratio || 0.5;
        }
        if (currentTime - animationStartedTime > this.inspirationRatio * animationTime) {
            var val = this.percentState(animationStartedTime + this.inspirationRatio * animationTime, animationTime - this.inspirationRatio * animationTime, currentTime);
            this.currentColor.L = this.baseColor.L * (1 - val);
        }
        else {
            var val = this.percentState(animationStartedTime, this.inspirationRatio * animationTime, currentTime);
            this.currentColor.L = this.baseColor.L * val;
        }
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(__WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].fromHSL(_this.currentColor));
        });
    };
    BreathEffect._name = 'breath';
    return BreathEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (BreathEffect);


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Apply a simple color to all LEDs
 */
var SimpleColorEffect = /** @class */ (function (_super) {
    __extends(SimpleColorEffect, _super);
    function SimpleColorEffect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleColorEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.color[0], options.color[1], options.color[2]);
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(color);
        });
    };
    SimpleColorEffect._name = 'simple-color';
    return SimpleColorEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (SimpleColorEffect);


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * States effect
 * Navigates from a state (Color) to the next one by the specified time, smoothly or not
 */
var StepperEffect = /** @class */ (function (_super) {
    __extends(StepperEffect, _super);
    function StepperEffect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StepperEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            var step_1 = options.steps[0];
            leds.forEach(function (led) {
                led.color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](step_1[1], step_1[2], step_1[3]);
            });
            this.initialized = true;
        }
        if (options.steps.length === 1) {
            var step_2 = options.steps[0];
            leds.forEach(function (led) {
                led.color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](step_2[1], step_2[2], step_2[3]);
            });
            return;
        }
        else if (!options.smooth) {
            leds.forEach(function (led) {
                var currentPeriodTime = (currentTime - animationStartedTime) % animationTime;
                options.steps.forEach(function (step, index) {
                    if (currentPeriodTime >= step[0]
                        && (index === options.steps.length - 1 || step[0] < options.steps[index + 1][0])) {
                        led.color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](step[1], step[2], step[3]);
                        return;
                    }
                });
            });
        }
        else {
            var currentPeriodTime_1 = (currentTime - animationStartedTime) % animationTime;
            var currentStepIndex_1 = NaN;
            options.steps.forEach(function (step, index) {
                if (currentPeriodTime_1 >= step[0]
                    && (index === options.steps.length - 1 || step[0] < options.steps[index + 1][0])) {
                    currentStepIndex_1 = index;
                    return;
                }
            });
            var currentStep = options.steps[currentStepIndex_1];
            var baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](currentStep[1], currentStep[2], currentStep[3]);
            var nextStep = options.steps[(currentStepIndex_1 + 1) % (options.steps.length)];
            var nextColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](nextStep[1], nextStep[2], nextStep[3]);
            var timeToReach = NaN;
            if (currentStepIndex_1 === options.steps.length - 1) {
                timeToReach = (animationTime - currentStep[0]);
            }
            else {
                timeToReach = (nextStep[0] - currentStep[0]);
            }
            var stepStartedTime = currentStep[0];
            var currentTimeRelative = ((currentTime - animationStartedTime) % (animationTime));
            var percent = this.percentState(stepStartedTime, timeToReach, currentTimeRelative, currentStep[4] || 'linear');
            var currentColor_1 = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(baseColor, nextColor, percent);
            leds.forEach(function (led) {
                led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(currentColor_1);
            });
        }
    };
    StepperEffect._name = 'stepper';
    return StepperEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (StepperEffect);


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Animated or static Rainbow Effect
 */
var RainbowEffect = /** @class */ (function (_super) {
    __extends(RainbowEffect, _super);
    function RainbowEffect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RainbowEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.setEasingFn(options.easing);
            this.initialized = true;
        }
        var angle = NaN;
        var len = leds.length;
        var phaseJump = (null != options.angleCover) ? options.angleCover / len : 360 / len;
        leds.forEach(function (led) {
            if (options.animated) {
                angle = (Math.ceil(360 * _this.percentState(animationStartedTime, animationTime, currentTime))
                    + (options.offsetAngle || 0)) % 360;
                led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].fromHSL({
                    H: Math.ceil((angle + Math.floor(led.id * phaseJump)) % 360) / 360,
                    S: 1,
                    L: 0.6
                });
            }
            else {
                angle = (options.offsetAngle || 0) % 360;
                led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].fromHSL({
                    H: (angle + Math.floor(led.id * phaseJump)) / 360,
                    S: 1,
                    L: 0.6
                });
            }
        });
    };
    RainbowEffect._name = 'rainbow';
    return RainbowEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (RainbowEffect);


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Stack LEDs one by one
 */
var StackEffect = /** @class */ (function (_super) {
    __extends(StackEffect, _super);
    function StackEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.stepTime = NaN;
        _this.stepsCount = NaN;
        return _this;
    }
    StackEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        var LEDSCount = leds.length;
        if (!this.initialized) {
            this.stackedColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.enabledColor[0], options.enabledColor[1], options.enabledColor[2]);
            this.notStackedColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.disabledColor[0], options.disabledColor[1], options.disabledColor[2]);
            this.stepTime = animationTime / leds.length;
            this.setEasingFn(options.easing);
            leds.forEach(function (led) {
                led.color = _this.notStackedColor;
            });
            if (!options.sameTourTime) {
                this.stepsCount = 0;
                for (var i = LEDSCount; i > 0; i--) {
                    this.stepsCount += i;
                }
            }
            this.initialized = true;
        }
        var enabledLEDS = NaN, currentLed = NaN;
        var currentSate = this.percentState(animationStartedTime, animationTime, currentTime);
        var currentStateLEDS = (LEDSCount * currentSate);
        if (options.sameTourTime) {
            enabledLEDS = Math.floor(currentStateLEDS);
            currentLed = Math.floor((LEDSCount - enabledLEDS) * (currentStateLEDS - enabledLEDS));
        }
        else {
            /*
            * *1.05 means we take a 5% security to ensure effect will run until all LEDs are enabled
            * Indeed, it can occur that refresh frequency is a way that prevent the script to reach the '1' percentState
            */
            var currentStep = Math.ceil(this.stepsCount * 1.05 * currentSate);
            var tmp = 0;
            enabledLEDS = 0;
            for (var i = LEDSCount; i >= 0; i--) {
                if (currentStep > i + tmp) {
                    enabledLEDS++;
                    tmp += i;
                }
                else {
                    currentLed = currentStep - tmp - 1;
                    break;
                }
            }
        }
        if (options.direction === 'reverse') {
            leds.forEach(function (led) {
                if (led.id < enabledLEDS) {
                    led.color = _this.stackedColor;
                }
                else if (led.id === LEDSCount - currentLed) {
                    led.color = _this.stackedColor;
                }
                else {
                    led.color = _this.notStackedColor;
                }
            });
        }
        else {
            leds.forEach(function (led) {
                if (led.id >= LEDSCount - enabledLEDS) {
                    led.color = _this.stackedColor;
                }
                else if (led.id === currentLed) {
                    led.color = _this.stackedColor;
                }
                else {
                    led.color = _this.notStackedColor;
                }
            });
        }
    };
    StackEffect._name = 'stack';
    return StackEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (StackEffect);


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Simulate trails
 */
var TrailsEffect = /** @class */ (function (_super) {
    __extends(TrailsEffect, _super);
    function TrailsEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.frequency = NaN; // Trails frequency
        _this.attenuation = NaN; // Light attenuation percent depending on the distance to leading head
        _this.baseLuminosity = NaN; // Trails color luminosity
        _this.cycleTime = NaN; // The time a trail need to make a turn
        _this.head = 0; // Leading LED position
        _this.firstCycleAchieved = false; // Has the first cycle done
        _this.lastPercent = NaN; // Needed to set the firstCycleAchieved
        return _this;
    }
    TrailsEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            if (options.attenuation) {
                var minAttenuation = 100 / leds.length, maxAttenuation = 100;
                this.attenuation = 0.01 * Math.max(minAttenuation, Math.min(maxAttenuation, options.attenuation));
            }
            this.cycleTime = options.cycleTime || 2000;
            this.frequency = Math.max(1, options.frequency || 0);
            if (options.adjustFrequency) {
                while (this.frequency > 0
                    && Math.round(leds.length / this.frequency) !== leds.length / this.frequency) {
                    this.frequency--;
                }
                if (leds.length / this.frequency !== Math.round(leds.length / this.frequency)) {
                    this.frequency = 0;
                }
            }
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.trailsColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.trailsColor[0], options.trailsColor[1], options.trailsColor[2]);
            this.setEasingFn(options.easing);
            this.initialized = true;
        }
        var percent = this.percentState(animationStartedTime, this.cycleTime, currentTime);
        if (!this.firstCycleAchieved && !isNaN(this.lastPercent) && this.lastPercent > percent) {
            this.firstCycleAchieved = true;
        }
        else {
            this.lastPercent = percent;
        }
        this.head = Math.round(percent * (leds.length - 1));
        leds.forEach(function (led) {
            var distance = NaN;
            if (options.direction === 'reverse') {
                distance = ((_this.head) + led.id) % _this.frequency;
            }
            else {
                distance = (_this.head - led.id) % _this.frequency;
            }
            if (distance < 0) {
                distance += _this.frequency;
            }
            led.color = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(_this.baseColor, _this.trailsColor, 1 - Math.abs(distance) * _this.attenuation);
        });
    };
    TrailsEffect._name = 'trails';
    return TrailsEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (TrailsEffect);


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Simulates an explosion (fusing particles)
 */
var ExplodeEffect = /** @class */ (function (_super) {
    __extends(ExplodeEffect, _super);
    function ExplodeEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.baseLuminosity = NaN; // Particles color base luminosity
        _this.stepsCount = NaN; // Steps count needed to achieve the whole animation
        _this.stepTime = NaN; // Time between each step
        _this.currentStep = NaN; // Current step
        _this.attenuation = NaN; // How much attenuating luminosity depending on the distance to the middle LED
        _this.maxTrailLength = NaN; // Cut the trail after X LEDs
        return _this;
    }
    ExplodeEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.middle = ((leds.length % 2) !== 0) ? [(leds.length - 1) / 2] :
                [Math.floor((leds.length - 1) / 2), Math.ceil((leds.length - 1) / 2)];
            this.stepsCount = Math.ceil(ExplodeEffect.stepPrecision * options.lifetime / animationTime);
            this.stepTime = options.lifetime / this.stepsCount;
            this.attenuation = 0.01 * options.attenuation || 0.12;
            this.maxTrailLength = options.maxTrailLength || 8;
            this.setEasingFn(options.easing);
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.baseLuminosity = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].toHSL(this.baseColor).L;
            this.initialized = true;
        }
        if ((currentTime - animationStartedTime) % animationTime < options.lifetime) {
            this.currentStep = Math.floor(ExplodeEffect.stepPrecision * this.ease(((currentTime - animationStartedTime) % animationTime) / options.lifetime));
        }
        else {
            this.currentStep = NaN;
        }
        var distance = Math.floor((this.currentStep / ExplodeEffect.stepPrecision)
            * (leds.length - 1 - this.middle[1] || this.middle[0]));
        var id1 = Math.max(0, this.middle[0] - distance);
        var id2 = Math.min(leds.length - 1, (this.middle[1] || this.middle[0]) + distance);
        var iterationLuminosity = Math.max(0, this.baseLuminosity * (1 - this.currentStep / this.stepsCount));
        if (!isNaN(this.currentStep)) {
            leds.forEach(function (led) {
                var luminosity = 0;
                if (led.id === id1 || led.id === id2) {
                    luminosity = iterationLuminosity;
                }
                else if (led.id < id2 || led.id > id1) {
                    var dist2 = NaN;
                    if (led.id < id2 && id2 - led.id < led.id - id1) {
                        dist2 = id2 - led.id;
                    }
                    else {
                        dist2 = led.id - id1;
                    }
                    if (dist2 > 0 && dist2 < _this.maxTrailLength) {
                        luminosity = Math.max(0, iterationLuminosity * (1 - dist2 * _this.attenuation));
                    }
                    else {
                        luminosity = 0;
                    }
                }
                var color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].toHSL(_this.baseColor);
                color.L = luminosity;
                led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].fromHSL(color);
            });
        }
    };
    ExplodeEffect._name = 'explode';
    ExplodeEffect.stepPrecision = 1000; // 1000 to make visible when lifetime is far away from animation duration
    return ExplodeEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (ExplodeEffect);


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Randomly apply a Color to the LEDs (all the same or all different) for a certain time
 */
var RandomColorEffect = /** @class */ (function (_super) {
    __extends(RandomColorEffect, _super);
    function RandomColorEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastChangeTime = NaN;
        _this.nextColorsArray = [];
        _this.currentBaseColorsArray = [];
        return _this;
    }
    RandomColorEffect.getBrightColor = function () {
        var rgb = [];
        rgb[0] = Math.random() * 256; // red
        rgb[1] = Math.random() * 256; // green
        rgb[2] = Math.random() * 256; // blue
        var max = NaN, min = NaN, notmax = NaN;
        if (rgb[0] > rgb[1]) {
            max = (rgb[0] > rgb[2]) ? 0 : 2;
            min = (rgb[1] < rgb[2]) ? 1 : 2;
        }
        else {
            max = (rgb[1] > rgb[2]) ? 1 : 2;
            notmax = 1 + max % 2;
            min = (rgb[0] < rgb[notmax]) ? 0 : notmax;
        }
        rgb[max] = 255;
        rgb[min] = 0;
        rgb.forEach(function (val, index) {
            rgb[index] = Math.floor(rgb[index]);
        });
        return new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](rgb[0], rgb[1], rgb[2]);
    };
    RandomColorEffect.getRandomColor = function (bright) {
        if (bright === void 0) { bright = true; }
        if (bright) {
            return RandomColorEffect.getBrightColor();
        }
        else {
            var r = Math.floor(Math.random() * 255) + 1;
            var g = Math.floor(Math.random() * 255) + 1;
            var b = Math.floor(Math.random() * 255) + 1;
            return new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](r, g, b);
        }
    };
    RandomColorEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.setEasingFn(options.easing);
            this.currentBaseColor = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
            if (options.byled) {
                leds.forEach(function (led) {
                    var base = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                    _this.currentBaseColorsArray.push(base);
                    led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(base);
                    _this.nextColorsArray.push(RandomColorEffect.getRandomColor(options.bright ? options.bright : true));
                });
            }
            else {
                this.nextColor = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                leds.forEach(function (led) {
                    led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(_this.currentBaseColor);
                });
            }
            this.initialized = true;
            return;
        }
        var setColor;
        if (options.smooth) {
            // Changing step
            if (isNaN(this.lastChangeTime) || this.lastChangeTime > currentTime
                || currentTime - this.lastChangeTime > options.stepTime) {
                if (!options.byled) {
                    if (null != this.nextColor) {
                        this.currentBaseColor = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(this.nextColor);
                    }
                    this.nextColor = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                }
                else {
                    for (var i = 0; i < leds.length; i++) {
                        this.currentBaseColorsArray[i] = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(this.nextColorsArray[i]);
                        this.nextColorsArray[i] = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                    }
                }
                this.lastChangeTime = currentTime;
            }
            var percent_1 = this.percentState(this.lastChangeTime, options.stepTime, currentTime);
            if (!options.byled) {
                var currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(this.currentBaseColor, this.nextColor, percent_1);
                setColor = currentColor;
            }
            else {
                leds.forEach(function (led) {
                    var currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(_this.currentBaseColorsArray[led.id], _this.nextColorsArray[led.id], percent_1);
                    led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(currentColor);
                });
            }
        }
        else if (this.lastChangeTime > currentTime || isNaN(this.lastChangeTime)
            || currentTime - this.lastChangeTime > options.stepTime) {
            if (!options.byled) {
                setColor = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
            }
            else {
                leds.forEach(function (led) {
                    led.color = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                });
            }
            this.lastChangeTime = currentTime;
        }
        else {
            return;
        }
        if (!options.byled) {
            leds.forEach(function (led) {
                led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(setColor);
            });
        }
    };
    RandomColorEffect._name = 'random-color';
    return RandomColorEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (RandomColorEffect);


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Randomly set LEDs luminosity to make it shine
 */
var ShineEffect = /** @class */ (function (_super) {
    __extends(ShineEffect, _super);
    function ShineEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.colors = [];
        _this.lastStep = NaN;
        return _this;
    }
    ShineEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.colors = [];
            this.colors.push(new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]));
            // lightVariationPercent refers to the maximum brightness percent change from the base color
            var lightVariation = Math.min(options.lightVariationPercent, 100);
            var color2_HSLA = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].toHSL(this.colors[0]);
            // color2_HSLA.H = (color2_HSLA.H+lightVariation/360)%360;
            color2_HSLA.L = Math.max(0, Math.min(1, (color2_HSLA.L + lightVariation / 100)));
            this.colors.push(__WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].fromHSL(color2_HSLA));
            var color3_HSLA = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].toHSL(this.colors[0]);
            // color3_HSLA.H = (color3_HSLA.H-lightVariation/360)%360;
            color3_HSLA.L = Math.max(0, Math.min(1, (color3_HSLA.L + lightVariation / 100)));
            this.colors.push(__WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].fromHSL(color3_HSLA));
            this.initialized = true;
        }
        var currentStep = Math.floor((currentTime - animationStartedTime) / options.stepTime);
        if (this.lastStep !== currentStep) {
            leds.forEach(function (led) {
                var rnd = Math.ceil(Math.random() * 3) - 1;
                led.color = _this.colors[rnd];
            });
            this.lastStep = currentStep;
        }
    };
    ShineEffect._name = 'shine';
    return ShineEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (ShineEffect);


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Simulates a candlelight
 */
var CandleEffect = /** @class */ (function (_super) {
    __extends(CandleEffect, _super);
    function CandleEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.maxBrightnessChange = NaN; // From the base Color, max brightness change allowed
        return _this;
    }
    CandleEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.setEasingFn('random');
            leds.forEach(function (led) {
                led.color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.color[0], options.color[1], options.color[2]);
            });
            this.maxBrightnessChange = ((!isNaN(options.maxBrightnessChange) ? options.maxBrightnessChange : 50) / 100);
            this.initialized = true;
        }
        var sign = (0.5 > Math.random()) ? -1 : 1;
        var change = Math.min((this.maxBrightnessChange * 255), 255 * Math.random());
        var color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](Math.min(255, Math.round(Math.max(0, options.color[0] + sign * change))), Math.min(255, Math.round(Math.max(0, options.color[1] + sign * change))), Math.min(255, Math.round(Math.max(0, options.color[2] + sign * change))));
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(color);
        });
    };
    CandleEffect._name = 'candle';
    return CandleEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (CandleEffect);


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Music dancing moving with audio signal
 * Important NOTE: This Effect is a simple Javascript class and has no access to an audio device
 * If you want to use it, it's up to you to update the AudioEffect.current_rms_value (from 0 to 1)
 */
var AudioEffect = /** @class */ (function (_super) {
    __extends(AudioEffect, _super);
    function AudioEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.linear = false;
        _this.advanced = false;
        _this.smooth = false;
        _this.count = 0;
        _this.reverse = false;
        _this.colorOFF = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](0, 0, 0);
        return _this;
    }
    AudioEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.initialized = true;
            this.count = leds.length;
            this.reverse = options.direction === 'reverse';
            this.linear = (options.linear === true);
            if (options.advanced === true) {
                this.slices = options.slices;
                this.advanced = true;
                this.smooth = options.smooth || false;
            }
            else {
                this.lowLevelColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.slices[0][0], options.slices[0][1], options.slices[0][2]);
                this.highLevelColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.slices[1][0], options.slices[1][1], options.slices[1][2]);
                this.advanced = false;
            }
        }
        var currentColor;
        switch (this.linear) {
            case false:
                if (this.advanced) {
                    for (var i = 0; i < this.slices.length; i++) {
                        if (100 * AudioEffect.current_rms_value <= this.slices[i][1]) {
                            if (this.smooth && i < this.slices.length - 1) {
                                var colorA = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i][2][0], this.slices[i][2][1], this.slices[i][2][2]);
                                var colorB = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i + 1][2][0], this.slices[i + 1][2][1], this.slices[i + 1][2][2]);
                                currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(colorA, colorB, AudioEffect.current_rms_value);
                            }
                            else {
                                currentColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i][2][0], this.slices[i][2][1], this.slices[i][2][2]);
                            }
                            break;
                        }
                    }
                }
                else {
                    currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(this.lowLevelColor, this.highLevelColor, AudioEffect.current_rms_value);
                }
                leds.forEach(function (led) {
                    led.color = currentColor;
                });
                break;
            case true:
                var breakPoint_1 = Math.floor(AudioEffect.current_rms_value * (this.count - 1));
                if (this.advanced) {
                    var currentCursor = 0;
                    for (var i = 0; i < this.slices.length; i++) {
                        var currentSliceBreakPoint = (i === this.slices.length - 1) ? this.count - 1 :
                            Math.floor(0.01 * this.count * this.slices[i + 1][0]);
                        for (var j = currentCursor; j <= currentSliceBreakPoint && j <= breakPoint_1; j++) {
                            var colorA = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i][2][0], this.slices[i][2][1], this.slices[i][2][2]);
                            var colorB = null;
                            if (i === this.slices.length - 1) {
                                colorB = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i][2][0], this.slices[i][2][1], this.slices[i][2][2]);
                            }
                            else {
                                colorB = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i + 1][2][0], this.slices[i + 1][2][1], this.slices[i + 1][2][2]);
                            }
                            if (this.smooth) {
                                var smoothFactor = (j - currentCursor) / (currentSliceBreakPoint - currentCursor);
                                currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(colorA, colorB, smoothFactor);
                            }
                            else {
                                currentColor = (i === this.slices.length - 1) ? colorB : colorA;
                            }
                            if (this.reverse) {
                                leds[this.count - 1 - j].color = currentColor;
                            }
                            else {
                                leds[j].color = currentColor;
                            }
                        }
                        currentCursor = currentSliceBreakPoint + 1;
                    }
                    for (var i = breakPoint_1; i < this.count; i++) {
                        if (this.reverse) {
                            leds[this.count - 1 - i].color = this.colorOFF;
                        }
                        else {
                            leds[i].color = this.colorOFF;
                        }
                    }
                }
                else {
                    leds.forEach(function (led, index) {
                        if (_this.reverse) {
                            led = leds[_this.count - 1 - index];
                        }
                        if (index < breakPoint_1) {
                            led.color = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(_this.lowLevelColor, _this.highLevelColor, _this.reverse ? ((_this.count - index) / _this.count) : (index / _this.count));
                        }
                        else {
                            led.color = _this.colorOFF;
                        }
                    });
                }
                break;
        }
    };
    AudioEffect._name = 'audio';
    AudioEffect.current_rms_value = 0; // Will be manually updated by the server
    return AudioEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (AudioEffect);


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * LED representation
 */
var LED = /** @class */ (function () {
    function LED(color) {
        this.color = color;
        this.id = LED.count++;
    }
    LED.reset = function () {
        LED.count = 0; // To count again from 0
    };
    LED.count = 0; // To assign unique IDs
    return LED;
}());
/* harmony default export */ __webpack_exports__["a"] = (LED);


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__LED__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Colors__ = __webpack_require__(21);


/**
 * LEDs array initializer and accessor
 */
var LEDSController = /** @class */ (function () {
    function LEDSController() {
    }
    /**
     * Fill the set with expected count LEDs
     * @param {Number} LEDsCount
     */
    LEDSController.createAll = function (LEDsCount) {
        if (LEDsCount === void 0) { LEDsCount = 1; }
        __WEBPACK_IMPORTED_MODULE_0__LED__["a" /* default */].reset();
        LEDSController.LEDs = [];
        for (var i = 0; i < LEDsCount; i++) {
            LEDSController.LEDs.push(new __WEBPACK_IMPORTED_MODULE_0__LED__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1__Colors__["a" /* default */].Off)); // switched off by default
        }
    };
    /**
     * Get all LEDs
     * @returns {Array<LED>}
     */
    LEDSController.getAll = function () {
        return LEDSController.LEDs;
    };
    LEDSController.LEDs = [];
    return LEDSController;
}());
/* harmony default export */ __webpack_exports__["a"] = (LEDSController);


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__ = __webpack_require__(17);

/**
 * Entry point for pure JS environments usage
 */
var LightItUpEngine = /** @class */ (function () {
    function LightItUpEngine() {
    }
    LightItUpEngine.Color = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["d" /* Color */];
    LightItUpEngine.EffectBase = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["e" /* EffectBase */];
    LightItUpEngine.EffectConfig = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["f" /* EffectConfig */];
    LightItUpEngine.EffectController = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["g" /* EffectController */];
    LightItUpEngine.LED = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["j" /* LED */];
    LightItUpEngine.LEDAnimator = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["k" /* LEDAnimator */];
    LightItUpEngine.LEDController = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["l" /* LEDController */];
    LightItUpEngine.EffectsAPI_JSON = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["h" /* EffectsAPI_JSON */];
    LightItUpEngine.AudioEffect = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["a" /* AudioEffect */];
    LightItUpEngine.Effects = {
        AudioEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["a" /* AudioEffect */],
        BreathEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["b" /* BreathEffect */],
        CandleEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["c" /* CandleEffect */],
        ExplodeEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["i" /* ExplodeEffect */],
        RainbowEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["m" /* RainbowEffect */],
        RandomColorEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["n" /* RandomColorEffect */],
        ShineEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["o" /* ShineEffect */],
        SimpleColorEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["p" /* SimpleColorEffect */],
        StackEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["q" /* StackEffect */],
        StepperEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["r" /* StepperEffect */],
        TrailsEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["s" /* TrailsEffect */]
    };
    return LightItUpEngine;
}());
/* harmony default export */ __webpack_exports__["default"] = (LightItUpEngine);


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EffectBase__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__EffectController__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LED__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__LEDAnimator__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__EffectConfig__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__LEDController__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__EffectsAPI_JSON__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__effects_AudioEffect__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__effects_BreathEffect__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__effects_CandleEffect__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__effects_ExplodeEffect__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__effects_RainbowEffect__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__effects_RandomColorEffect__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__effects_ShineEffect__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__effects_SimpleColorEffect__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__effects_StackEffect__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__effects_StepperEffect__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__effects_TrailsEffect__ = __webpack_require__(8);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__Color__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_1__EffectBase__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_5__EffectConfig__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_2__EffectController__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_3__LED__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_4__LEDAnimator__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_6__LEDController__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_7__EffectsAPI_JSON__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_8__effects_AudioEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_9__effects_BreathEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_10__effects_CandleEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_11__effects_ExplodeEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_12__effects_RainbowEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return __WEBPACK_IMPORTED_MODULE_13__effects_RandomColorEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return __WEBPACK_IMPORTED_MODULE_14__effects_ShineEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return __WEBPACK_IMPORTED_MODULE_15__effects_SimpleColorEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return __WEBPACK_IMPORTED_MODULE_16__effects_StackEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return __WEBPACK_IMPORTED_MODULE_17__effects_StepperEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return __WEBPACK_IMPORTED_MODULE_18__effects_TrailsEffect__["a"]; });
//  Public classes








// Effects














/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Some useful methods shared by all the effects
 */
var EffectsUtils = /** @class */ (function () {
    function EffectsUtils() {
    }
    // Different well known easing & bezier functions to compute effects proggress state regarding to the current time
    EffectsUtils.Easing = {
        cubicBezierBase: function (y1, y2, t) { return (+(3 * y1 * t * Math.pow((1 - t), 2)) + (3 * y2 * t * t * (1 - t)) + t * t * t); },
        cubicBezier: function (p1, p2, t) { return EffectsUtils.Easing.cubicBezierBase(p1.y, p2.y, t); },
        linear: function (t) { return t; },
        easeInQuad: function (t) { return t * t; },
        easeOutQuad: function (t) { return t * (2 - t); },
        easeInOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },
        easeInCubic: function (t) { return t * t * t; },
        easeOutCubic: function (t) { return (--t) * t * t + 1; },
        easeInOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },
        easeInQuart: function (t) { return t * t * t * t; },
        easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },
        easeInOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; },
        easeInQuint: function (t) { return t * t * t * t * t; },
        easeOutQuint: function (t) { return 1 + (--t) * t * t * t * t; },
        easeInOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; },
        random: function (t) { return Math.random(); },
    };
    return EffectsUtils;
}());
/* harmony default export */ __webpack_exports__["a"] = (EffectsUtils);


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Simple Point (x, y) representation
 */
var Point = /** @class */ (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    return Point;
}());
/* harmony default export */ __webpack_exports__["a"] = (Point);


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectController__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__LEDController__ = __webpack_require__(15);


/**
 * Effects assignment manager
 */
var LEDAnimator = /** @class */ (function () {
    function LEDAnimator() {
    }
    /**
     * Prevents an effect to be played (for example when its repeat limit or limit time is reached)
     * @param {number} index Effect index inside the effects Array
     */
    LEDAnimator.stopEffect = function (index) {
        LEDAnimator.effects[index].enabled = false;
    };
    /**
     * Re-enable all stopped effects
     */
    LEDAnimator.enableAllEffects = function () {
        LEDAnimator.effects.forEach(function (effect) {
            effect.enabled = true;
        });
    };
    /**
     * Iterate through all the effects, apply them to the LEDs and send back the updated LEDs to the callback
     * @param {Function} callback
     * @param {boolean} reset
     * @param {number} currentEffectStartTime
     */
    LEDAnimator.processLEDs = function (callback, reset, currentEffectStartTime) {
        if (reset === void 0) { reset = false; }
        if (currentEffectStartTime === void 0) { currentEffectStartTime = NaN; }
        var time = new Date().getTime();
        LEDAnimator.enableAllEffects(); // Re-enabling effects for this iteration
        callback(LEDAnimator.processEffects(__WEBPACK_IMPORTED_MODULE_1__LEDController__["a" /* default */].getAll(), time, reset, currentEffectStartTime));
    };
    /**
     * Apply effects on LEDs array
     * @param {Array<LED>} LEDs
     * @param {number} time
     * @param {boolean} reset
     * @param {number} currentEffectStartTime
     */
    LEDAnimator.processEffects = function (LEDs, time, reset, currentEffectStartTime) {
        if (reset === void 0) { reset = false; }
        if (currentEffectStartTime === void 0) { currentEffectStartTime = NaN; }
        // If animation must be resetted
        if (reset || !LEDAnimator.startTime) {
            LEDAnimator.startTime = new Date().getTime();
        }
        // If animation should be resumed at a specified time
        if (!isNaN(currentEffectStartTime)) {
            LEDAnimator.startTime = currentEffectStartTime;
        }
        // Effects application loop
        LEDAnimator.effects.forEach(function (effect, index) {
            if (!effect.isEnabled || !effect.isActivated) {
                return; // Do nothing if effect has ended for this iteration
            }
            var duration = effect.options.duration || 0; // Current effect duration
            var delay = effect.options.delay || 0; // Current effect delay (time before it starts)
            var waitAtEnd = effect.options.waitAtEnd || 0; // Time to wait at end of current effect before resetting
            var repeat = effect.options.repeat || NaN; // Number of times to repeat the current effect
            // Stop the effect if it's over
            if (!isNaN(repeat) && ((time - LEDAnimator.startTime + delay) / (duration + waitAtEnd) > repeat)) {
                return LEDAnimator.stopEffect(index);
            }
            // Do nothing if effect is not in active state regarding to its delay, duration and waitAtEnd time
            if (delay + waitAtEnd + duration !== 0) {
                if ((time - LEDAnimator.startTime) % (delay + duration + waitAtEnd) < delay
                    ||
                        (waitAtEnd !== 0
                            && (time - LEDAnimator.startTime) % (delay + duration + waitAtEnd) >= delay + duration)) {
                    return;
                }
            }
            // Time reference to make the effects know from when to compute the state
            var thisEffectStartTime = (time - LEDAnimator.startTime)
                - (delay + duration + waitAtEnd)
                    * Math.floor((time - LEDAnimator.startTime) / (delay + duration + waitAtEnd));
            // Apply the effect
            __WEBPACK_IMPORTED_MODULE_0__EffectController__["a" /* default */].applyEffect(LEDs, effect, delay, duration, thisEffectStartTime);
        });
        return LEDs;
    };
    /**
     * Set the effects stack in the given order
     * @param {Array<EffectConfig>} effects
     * @param {boolean} doNotReset If true and effects have attached instances, then these instances will be used
     */
    LEDAnimator.setEffects = function (effects, doNotReset) {
        if (doNotReset === void 0) { doNotReset = false; }
        if (!doNotReset) {
            effects.forEach(function (effect) {
                if (effect.instance) {
                    effect.instance.forceReinitialize();
                }
            });
        }
        LEDAnimator.effects = effects;
    };
    LEDAnimator.effects = []; // Stores all the effects of the current animation
    LEDAnimator.startTime = NaN; // Time reference to the animation beginning
    return LEDAnimator;
}());
/* harmony default export */ __webpack_exports__["a"] = (LEDAnimator);


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);

/**
 * Frequently used colors store
 */
var Colors = /** @class */ (function () {
    function Colors() {
    }
    Colors.Off = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](0, 0, 0); // => Switched OFF LED state
    return Colors;
}());
/* harmony default export */ __webpack_exports__["a"] = (Colors);


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Effect wrapper class
 */
var EffectConfig = /** @class */ (function () {
    /**
     *
     * @param {string} name Effect unique name as defined inside the EffectController Class
     * @param options Options to configure and customize the effect
     */
    function EffectConfig(name, options) {
        this.name = name;
        this.options = options;
        this.enabled = true; // If false, linked effect won't be applied
        this.instance = null; // Linked effect object
    }
    Object.defineProperty(EffectConfig.prototype, "isEnabled", {
        /**
         * Check if the effect is enabled regarding to its time (delay, duration, wait at end) configuration
         * @returns {boolean}
         */
        get: function () {
            return this.enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EffectConfig.prototype, "isActivated", {
        /**
         * User option to enable or disable the effect (it will override the 'enabled' property
         */
        get: function () {
            return this.options.activated;
        },
        enumerable: true,
        configurable: true
    });
    return EffectConfig;
}());
/* harmony default export */ __webpack_exports__["a"] = (EffectConfig);


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EffectsAPI_JSON; });
/**
 * Expose all existing options of available effects
 */
var EffectsAPI_JSON = {
    "globalProperties": [
        {
            "id": "activated",
            "value": true,
            "title": "Activated",
            "description": "Should the the effect run",
            "type": "boolean"
        },
        {
            "id": "delay",
            "value": 0,
            "title": "Delay",
            "description": "Delay the animation start",
            "type": "integer",
            "min": 0,
            "step": 1
        },
        {
            "id": "duration",
            "title": "Duration",
            "type": "integer",
            "value": 3000,
            "min": 1,
            "step": 1
        },
        {
            "id": "waitAtEnd",
            "value": 0,
            "title": "Wait at effect end",
            "type": "integer",
            "min": 0,
            "step": 1
        },
        {
            "id": "repeat",
            "value": null,
            "title": "Repeat",
            "description": "How many times run the effect",
            "type": "integer",
            "step": 1,
            "min": 1
        }
    ],
    "list": [
        {
            "name": "simple-color",
            "title": "Simple Color Effect",
            "description": "Set a simple color",
            "properties": [
                {
                    "id": "color",
                    "title": "Color basis",
                    "type": "color",
                    "value": [
                        0,
                        83,
                        251
                    ]
                }
            ]
        },
        {
            "name": "random-color",
            "title": "Random Color Effect",
            "description": "Set a random color at each step",
            "properties": [
                {
                    "id": "bright",
                    "title": "Bright colors only",
                    "type": "boolean",
                    "value": true
                },
                {
                    "id": "byled",
                    "title": "1 color for 1 led",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "stepTime",
                    "title": "Step time",
                    "type": "integer",
                    "value": 500,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "smooth",
                    "title": "Smooth",
                    "type": "boolean",
                    "value": true
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "linear"
                }
            ]
        },
        {
            "name": "trails",
            "title": "Trails Effect",
            "description": "Running trails",
            "properties": [
                {
                    "id": "baseColor",
                    "title": "Base color",
                    "type": "color",
                    "value": [
                        50,
                        200,
                        50
                    ]
                },
                {
                    "id": "trailsColor",
                    "title": "Trail color",
                    "type": "color",
                    "value": [
                        255,
                        84,
                        29
                    ]
                },
                {
                    "id": "cycleTime",
                    "title": "Cycle time",
                    "type": "integer",
                    "value": 1500,
                    "min": 1,
                    "step": 1
                },
                {
                    "id": "frequency",
                    "title": "Trails frequency",
                    "type": "integer",
                    "value": 50,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "adjustFrequency",
                    "title": "Adjust frequency",
                    "type": "boolean",
                    "value": true
                },
                {
                    "id": "attenuation",
                    "title": "Attenuation %",
                    "type": "integer",
                    "value": 25,
                    "min": 1,
                    "step": 1
                },
                {
                    "id": "maxtraillength",
                    "title": "Max trail length",
                    "type": "integer",
                    "value": 5,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "linear"
                }
            ]
        },
        {
            "name": "shine",
            "title": "Shine Effect",
            "description": "Randomly shining by independently changing color luminosity for each LED",
            "properties": [
                {
                    "id": "stepTime",
                    "title": "Step time",
                    "type": "integer",
                    "value": 100,
                    "min": 1,
                    "step": 1
                },
                {
                    "id": "lightVariationPercent",
                    "title": "Light variation (%)",
                    "type": "integer",
                    "value": 20,
                    "min": 0,
                    "max": 100,
                    "step": 1
                },
                {
                    "id": "baseColor",
                    "title": "Base color",
                    "type": "color",
                    "value": [
                        30,
                        0,
                        190
                    ]
                }
            ]
        },
        {
            "name": "explode",
            "title": "Explosion Effect",
            "description": "Simulates an explosion blast and send particles",
            "properties": [
                {
                    "id": "lifetime",
                    "title": "Particle Life time",
                    "type": "integer",
                    "value": 4000,
                    "min": 1,
                    "step": 1
                },
                {
                    "id": "maxTrailLength",
                    "title": "Trail length",
                    "type": "integer",
                    "value": 8,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "attenuation",
                    "title": "Attenuation %",
                    "type": "integer",
                    "value": 12,
                    "min": 0,
                    "max": 100,
                    "step": 1
                },
                {
                    "id": "baseColor",
                    "title": "Base Color",
                    "type": "color",
                    "value": [
                        100,
                        200,
                        100
                    ]
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "easeInQuad"
                }
            ]
        },
        {
            "name": "stack",
            "title": "Stack Effect",
            "description": "Simulate a stack",
            "properties": [
                {
                    "id": "sameTourTime",
                    "title": "Same tour time",
                    "type": "boolean",
                    "value": true
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                },
                {
                    "id": "enabledColor",
                    "title": "Color 'ON'",
                    "type": "color",
                    "value": [
                        255,
                        0,
                        0
                    ]
                },
                {
                    "id": "disabledColor",
                    "title": "Color 'OFF'",
                    "type": "color",
                    "value": [
                        0,
                        0,
                        0
                    ]
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "linear"
                },
                {
                    "id": "_overriders",
                    "type": "overriders",
                    "value": [
                        [
                            "duration",
                            60000
                        ]
                    ]
                }
            ]
        },
        {
            "name": "stepper",
            "title": "Stepper Effect",
            "description": "Define different steps (different color at different times)",
            "properties": [
                {
                    "id": "smooth",
                    "title": "Smooth",
                    "value": true,
                    "type": "boolean"
                },
                {
                    "id": "steps",
                    "title": "Steps",
                    "value": [
                        [
                            0,
                            255,
                            0,
                            0,
                            "linear"
                        ],
                        [
                            1000,
                            255,
                            255,
                            0,
                            "linear"
                        ]
                    ],
                    "type": "steps"
                },
                {
                    "id": "_overriders",
                    "type": "overriders",
                    "value": [
                        [
                            "duration",
                            2000
                        ]
                    ]
                }
            ]
        },
        {
            "name": "candle",
            "title": "Candlelight Effect",
            "description": "Simulate a candle light effect",
            "properties": [
                {
                    "id": "color",
                    "title": "Color basis",
                    "type": "color",
                    "value": [
                        223,
                        156,
                        0
                    ]
                },
                {
                    "id": "maxBrightnessChange",
                    "title": "Brightness variability %",
                    "value": 20,
                    "type": "integer",
                    "min": 0,
                    "max": 100,
                    "step": 1
                }
            ]
        },
        {
            "name": "rainbow",
            "title": "Rainbow Effect",
            "description": "Create a customizable & animatable rainbow effect",
            "properties": [
                {
                    "id": "animated",
                    "title": "Animated",
                    "value": true,
                    "type": "boolean"
                },
                {
                    "id": "angleCover",
                    "title": "Angle covered",
                    "type": "integer",
                    "value": 360,
                    "min": 0,
                    "max": 360,
                    "step": 1
                },
                {
                    "id": "offsetAngle",
                    "title": "Angle offset",
                    "type": "integer",
                    "value": 0,
                    "min": 0,
                    "max": 360,
                    "step": 1
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "value": "linear",
                    "type": "easing"
                }
            ]
        },
        {
            "name": "breath",
            "title": "Breath Effect",
            "description": "Smooth one or more color property.",
            "properties": [
                {
                    "id": "easing",
                    "title": "Easing",
                    "value": "linear",
                    "type": "easing"
                },
                {
                    "id": "basecolor",
                    "title": "Color basis",
                    "type": "color",
                    "value": [
                        230,
                        80,
                        0
                    ]
                },
                {
                    "id": "inspiration_ratio",
                    "title": "Inspiration %",
                    "type": "integer",
                    "min": "0",
                    "max": "100",
                    "value": 57
                }
            ]
        },
        {
            "name": "audio",
            "title": "Music Dancing",
            "description": "Follow current audio playing signal power.",
            "properties": [
                {
                    "id": "linear",
                    "title": "Linear morph",
                    "value": false,
                    "type": "boolean"
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal",
                    "relevant": [
                        [
                            "linear",
                            true
                        ]
                    ]
                },
                {
                    "id": "advanced",
                    "title": "Advanced mode",
                    "value": false,
                    "type": "boolean"
                },
                {
                    "id": "smooth",
                    "title": "Smooth",
                    "value": false,
                    "type": "boolean",
                    "relevant": [
                        [
                            [
                                "linear",
                                true
                            ],
                            [
                                "advanced",
                                true
                            ]
                        ]
                    ]
                },
                {
                    "id": "frequency-band",
                    "title": "Based on",
                    "value": "",
                    "type": "frequency-band"
                },
                {
                    "id": "slices",
                    "title": "Slices",
                    "value": [
                        [
                            10,
                            0,
                            10
                        ],
                        [
                            255,
                            0,
                            255
                        ]
                    ],
                    "type": "slices"
                },
                {
                    "id": "_unique",
                    "title": "Unique",
                    "value": true,
                    "type": "unique"
                }
            ]
        }
    ]
};


/***/ })
/******/ ])["default"];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,